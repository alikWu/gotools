package file

import (
	"bytes"
	"go/ast"
	"go/format"
	"go/token"
	"os"

	"github.com/alikWu/gotools/objectLoader/internal"
)

type injectStructsFileGenerator struct {
	targetFileName string
}

func NewInjectStructsFileGenerator(targetFileName string) internal.FileGenerator {
	return &injectStructsFileGenerator{targetFileName: targetFileName}
}

func (isfg *injectStructsFileGenerator) Generate(astGenerator internal.AstGenerator) (*os.File, error) {
	fileSet, f, err := astGenerator.Generate()
	if err != nil {
		return nil, err
	}

	return isfg.writeGoFile(fileSet, f)
}

func (isfg *injectStructsFileGenerator) writeGoFile(fileSet *token.FileSet, f *ast.File) (*os.File, error) {
	var output []byte
	buffer := bytes.NewBuffer(output)

	err := format.Node(buffer, fileSet, f)
	if err != nil {
		return nil, err
	}

	file, err := os.Create(isfg.targetFileName)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	_, err = file.Write([]byte("//Code generated by objectLoader DO NOT EDIT \n" + buffer.String()))
	if err != nil {
		return nil, err
	}

	return file, nil
}
